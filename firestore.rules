rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function user(uid) { return get(/databases/$(database)/documents/users/$(uid)); }
    function hasRole(uid, role) { return user(uid).data.roles[role] == true; }

    match /users/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid || hasRole(request.auth.uid, 'pc');
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update: if isSignedIn() && hasRole(request.auth.uid, 'pc');
    }

    match /courses/{courseId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && hasRole(request.auth.uid,'pc');

      match /tasks/{taskId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && hasRole(request.auth.uid,'pc');
        allow update: if isSignedIn(); // tighten later
      }
    }

    match /meta/{docId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && hasRole(request.auth.uid,'pc');
    }

    match /templates/{id} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn() && hasRole(request.auth.uid,'pc');
    }
  }
}
