
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function user(uid) { return get(/databases/$(database)/documents/users/$(uid)); }
    function hasRole(uid, role) { return user(uid).data.roles[role] == true; }

    match /users/{uid} {
      // Users can read their own doc; PCs can read any user
      allow read: if isSignedIn() && (request.auth.uid == uid || hasRole(request.auth.uid, 'pc'));
      // Create own user doc on first sign-in
      allow create: if isSignedIn() && request.auth.uid == uid;
      // Allow users to update their own doc (bootstrap the first PC)
      // PCs can update any user doc.
      allow update: if isSignedIn() && (request.auth.uid == uid || hasRole(request.auth.uid, 'pc'));
    }

    match /courses/{courseId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && hasRole(request.auth.uid,'pc');

      match /tasks/{taskId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && hasRole(request.auth.uid,'pc');
        allow update: if isSignedIn(); // MVP; can tighten later
      }
    }

    match /meta/{docId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && hasRole(request.auth.uid,'pc');
    }

    match /templates/{id} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn() && hasRole(request.auth.uid,'pc');
    }

    match /app/{docId} {
      allow read: if resource.data.password == "passthesalt";
      allow create, update: if request.resource.data.password == "passthesalt";
      allow delete: if resource.data.password == "passthesalt";
    }
  }
}
